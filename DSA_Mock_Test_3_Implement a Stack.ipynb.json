{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "\"\"\"Implement a stack using a list in Python. Include the necessary methods such as push, pop, and isEmpty.\"\"\"\nstack = []\nstack.append('a')\nstack.append('b')\nstack.append('c')\nprint('Initial stack')\nprint(stack)\nprint('\\nElements popped from stack:')\nprint(stack.pop())\nprint(stack.pop()) \nprint(stack.pop())\nprint('\\nStack after elements are popped:')\nprint(stack) \n\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 1,
      "outputs": [
        {
          "name": "stdout",
          "text": "Initial stack\n['a', 'b', 'c']\n\nElements popped from stack:\nc\nb\na\n\nStack after elements are popped:\n[]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}